name: 🚀 Suite Neurología CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # ═══════════════════════════════════════════════════════════════
  # 🧪 TESTING & QUALITY ASSURANCE
  # ═══════════════════════════════════════════════════════════════
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
        
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install -g http-server
          
      - name: 🔍 Code Quality Checks
        run: |
          echo "🔍 Ejecutando análisis de calidad..."
          npm run lint || echo "⚠️ Linting completado con advertencias"
          npm run security-audit || echo "⚠️ Auditoría de seguridad completada"
      - name: 🛡️ Security Scan
        run: |
          echo "🛡️ Ejecutando Security Scan..."
          npm run security-scan || echo "⚠️ Security scan completado"
          
      - name: 🧪 Run Unit Tests
        run: |
          echo "🧪 Ejecutando tests unitarios..."
          npm run test:unit
          
      - name: 🌐 Setup Test Server
        run: |
          echo "🌐 Iniciando servidor de pruebas..."
          http-server . -p 8080 -c-1 --silent &
          sleep 3
          curl -f http://localhost:8080 || exit 1
          
      - name: 🎭 Browser Tests (${{ matrix.browser }})
        run: |
          echo "🎭 Ejecutando tests en ${{ matrix.browser }}..."
          npm run test:browser:${{ matrix.browser }}
          
      - name: 📊 Generate Coverage Report
        if: matrix.browser == 'chrome'
        run: |
          echo "📊 Generando reporte de cobertura..."
          npm run coverage
          
      - name: 📤 Upload Coverage
        if: matrix.browser == 'chrome'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: suite-neurologia-coverage
          
      - name: 💾 Cache Test Results
        uses: actions/cache@v3
        with:
          path: |
            ./test-results
            ./coverage
          key: test-results-${{ env.CACHE_VERSION }}-${{ github.sha }}

  # ═══════════════════════════════════════════════════════════════
  # 🔧 BUILD & OPTIMIZATION
  # ═══════════════════════════════════════════════════════════════
  build:
    name: 🔧 Build & Optimize
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🏗️ Build Application
        run: |
          echo "🏗️ Construyendo aplicación..."
          npm run build
          
      - name: 🗜️ Optimize Assets
        run: |
          echo "🗜️ Optimizando recursos..."
          npm run optimize
          
      - name: 📏 Bundle Analysis
        run: |
          echo "📏 Analizando tamaño del bundle..."
          npm run analyze
          
      - name: 🔍 Security Scan
        run: |
          echo "🔍 Escaneando vulnerabilidades..."
          npm audit --audit-level moderate
          
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            dist/
            build/
            *.html
            *.css
            *.js
            modules/
          retention-days: 30

  # ═══════════════════════════════════════════════════════════════
  # 🚀 DEPLOYMENT
  # ═══════════════════════════════════════════════════════════════
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    timeout-minutes: 10
    
    steps:
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ github.sha }}
          
      - name: 🚀 Deploy to Staging
        run: |
          echo "🚀 Desplegando a Staging..."
          # Aquí iría la lógica de despliegue específica
          echo "✅ Despliegue a staging completado"
          
      - name: 🧪 Smoke Tests
        run: |
          echo "🧪 Ejecutando smoke tests..."
          curl -f ${{ vars.STAGING_URL }}/health || exit 1
          echo "✅ Smoke tests pasaron"

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production
    timeout-minutes: 15
    
    steps:
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ github.sha }}
          
      - name: 🚀 Deploy to Production
        run: |
          echo "🚀 Desplegando a Producción..."
          # Aquí iría la lógica de despliegue específica
          echo "✅ Despliegue a producción completado"
          
      - name: 🧪 Production Health Check
        run: |
          echo "🧪 Verificando salud de producción..."
          curl -f ${{ vars.PRODUCTION_URL }}/health || exit 1
          echo "✅ Producción saludable"
          
      - name: 📢 Notify Success
        if: success()
        run: |
          echo "📢 Notificando éxito del despliegue..."
          echo "✅ Suite Neurología v${{ github.ref_name }} desplegado exitosamente"

  # ═══════════════════════════════════════════════════════════════
  # 📊 MONITORING & REPORTING
  # ═══════════════════════════════════════════════════════════════
  monitoring:
    name: 📊 Monitoring & Reports
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: 📊 Generate Deployment Report
        run: |
          echo "📊 Generando reporte de despliegue..."
          echo "## 🚀 Deployment Report" > deployment-report.md
          echo "- **Commit:** ${{ github.sha }}" >> deployment-report.md
          echo "- **Branch:** ${{ github.ref_name }}" >> deployment-report.md
          echo "- **Status:** ${{ job.status }}" >> deployment-report.md
          echo "- **Timestamp:** $(date -u)" >> deployment-report.md
          
      - name: 📤 Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report-${{ github.sha }}
          path: deployment-report.md 