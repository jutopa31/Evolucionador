// üß† Script de Prueba para la Suite de IA
// Ejecuta este c√≥digo en la consola del navegador para probar las funciones

console.log('üß™ INICIANDO PRUEBAS DE IA...');

// 1. Verificar que los m√≥dulos est√©n cargados
function checkAIModules() {
    console.log('\nüìã VERIFICANDO M√ìDULOS DE IA:');
    
    const modules = [
        'window.AIEngine',
        'window.NeurologicalPatternClassifier', 
        'window.AIDashboard',
        'window.AIIntegration'
    ];
    
    modules.forEach(module => {
        const exists = eval(`typeof ${module} !== 'undefined'`);
        console.log(`${exists ? '‚úÖ' : '‚ùå'} ${module}: ${exists ? 'CARGADO' : 'NO ENCONTRADO'}`);
    });
}

// 2. Probar an√°lisis de texto m√©dico
async function testMedicalTextAnalysis() {
    console.log('\nüî¨ PROBANDO AN√ÅLISIS DE TEXTO M√âDICO:');
    
    const testTexts = [
        "Paciente presenta hemiparesia derecha y afasia de expresi√≥n",
        "Temblor en reposo, rigidez muscular y bradicinesia",
        "P√©rdida de memoria reciente y desorientaci√≥n temporal",
        "Crisis convulsivas t√≥nico-cl√≥nicas generalizadas"
    ];
    
    for (const text of testTexts) {
        console.log(`\nüìù Analizando: "${text}"`);
        
        if (window.AIEngine) {
            try {
                const analysis = await window.AIEngine.analyzeMedicalText(text);
                console.log('üß† Resultado:', analysis);
            } catch (error) {
                console.error('‚ùå Error:', error);
            }
        } else {
            console.log('‚ùå AIEngine no disponible');
        }
    }
}

// 3. Probar clasificador neurol√≥gico
function testNeurologicalClassifier() {
    console.log('\nüß¨ PROBANDO CLASIFICADOR NEUROL√ìGICO:');
    
    const testSymptoms = [
        {
            age: 70,
            motorSymptoms: true,
            tremor: false,
            rigidity: false,
            balanceProblems: true,
            speechProblems: true,
            memoryIssues: false,
            cognitiveSymptoms: false,
            seizures: false,
            consciousnessLoss: false
        },
        {
            age: 65,
            motorSymptoms: true,
            tremor: true,
            rigidity: true,
            balanceProblems: true,
            speechProblems: false,
            memoryIssues: false,
            cognitiveSymptoms: false,
            seizures: false,
            consciousnessLoss: false
        }
    ];
    
    testSymptoms.forEach((symptoms, index) => {
        console.log(`\nüîç Caso ${index + 1}:`, symptoms);
        
        if (window.NeurologicalPatternClassifier) {
            try {
                const classification = window.NeurologicalPatternClassifier.classifyNeurologicalSymptoms(symptoms);
                console.log('üéØ Clasificaci√≥n:', classification);
            } catch (error) {
                console.error('‚ùå Error:', error);
            }
        } else {
            console.log('‚ùå NeurologicalPatternClassifier no disponible');
        }
    });
}

// 4. Activar an√°lisis autom√°tico
function triggerAutoAnalysis() {
    console.log('\n‚ö° ACTIVANDO AN√ÅLISIS AUTOM√ÅTICO:');
    
    // Simular escritura en textarea para activar an√°lisis autom√°tico
    const textareas = document.querySelectorAll('textarea');
    
    if (textareas.length > 0) {
        const textarea = textareas[0];
        const testText = "Paciente de 68 a√±os con temblor en reposo en mano derecha, rigidez muscular y bradicinesia. Antecedentes de hipertensi√≥n arterial.";
        
        console.log('üìù Escribiendo texto de prueba en textarea...');
        textarea.value = testText;
        
        // Disparar eventos para activar an√°lisis autom√°tico
        textarea.dispatchEvent(new Event('input', { bubbles: true }));
        textarea.dispatchEvent(new Event('change', { bubbles: true }));
        
        console.log('‚úÖ Texto insertado, esperando an√°lisis autom√°tico...');
    } else {
        console.log('‚ùå No se encontraron textareas');
    }
}

// 5. Probar dashboard de IA
function testAIDashboard() {
    console.log('\nüìä PROBANDO DASHBOARD DE IA:');
    
    if (window.AIDashboard) {
        try {
            // Mostrar dashboard
            window.AIDashboard.showDashboard();
            console.log('‚úÖ Dashboard mostrado');
            
            // Agregar datos de prueba
            window.AIDashboard.addAnalysisResult({
                type: 'medical_text',
                result: 'Posible Parkinson',
                confidence: 0.85,
                timestamp: Date.now()
            });
            
            window.AIDashboard.addPredictionResult({
                condition: 'parkinson',
                confidence: 0.85
            });
            
            console.log('‚úÖ Datos de prueba agregados al dashboard');
        } catch (error) {
            console.error('‚ùå Error:', error);
        }
    } else {
        console.log('‚ùå AIDashboard no disponible');
    }
}

// 6. Probar integraci√≥n con medicamentos
function testMedicationAnalysis() {
    console.log('\nüíä PROBANDO AN√ÅLISIS DE MEDICAMENTOS:');
    
    const testMedications = ['Levodopa', 'Carbidopa', 'Ropinirol', 'Warfarina'];
    
    testMedications.forEach(async (med) => {
        console.log(`\nüíä Analizando: ${med}`);
        
        if (window.AIIntegration) {
            try {
                const analysis = await window.AIIntegration.analyzeMedication(med);
                console.log('üîç An√°lisis:', analysis);
            } catch (error) {
                console.error('‚ùå Error:', error);
            }
        } else {
            console.log('‚ùå AIIntegration no disponible');
        }
    });
}

// 8. Probar secci√≥n de medicamentos espec√≠ficamente
function testMedicationSection() {
    console.log('\nüíä PROBANDO SECCI√ìN DE MEDICAMENTOS:');
    
    const bedId = window.appState?.getCurrentBedId();
    if (!bedId) {
        console.log('‚ùå No hay cama seleccionada');
        return;
    }
    
    console.log(`üõèÔ∏è Cama actual: ${bedId}`);
    
    // Verificar elementos de la secci√≥n
    const elements = {
        section: document.getElementById(`section-medicacion-${bedId}`),
        content: document.getElementById(`content-medicacion-${bedId}`),
        input: document.getElementById(`med-input-${bedId}`),
        suggestions: document.getElementById(`med-suggestions-${bedId}`),
        doseForm: document.getElementById(`dose-form-${bedId}`),
        doseInput: document.getElementById(`dose-input-${bedId}`),
        addBtn: document.getElementById(`dose-add-${bedId}`),
        cancelBtn: document.getElementById(`dose-cancel-${bedId}`),
        display: document.getElementById(`med-display-${bedId}`)
    };
    
    console.log('üîç Verificando elementos:');
    Object.entries(elements).forEach(([name, element]) => {
        console.log(`${element ? '‚úÖ' : '‚ùå'} ${name}: ${element ? 'encontrado' : 'NO encontrado'}`);
    });
    
    // Probar funcionalidad si los elementos existen
    if (elements.input && elements.suggestions) {
        console.log('\nüìù Probando funcionalidad de b√∫squeda...');
        
        // Simular escritura
        elements.input.value = 'levo';
        elements.input.dispatchEvent(new Event('input', { bubbles: true }));
        
        setTimeout(() => {
            const suggestions = elements.suggestions.children.length;
            console.log(`üîç Sugerencias mostradas: ${suggestions}`);
            
            if (suggestions > 0) {
                console.log('‚úÖ Sistema de sugerencias funcionando');
                
                // Simular clic en primera sugerencia
                const firstSuggestion = elements.suggestions.children[0];
                if (firstSuggestion) {
                    firstSuggestion.click();
                    console.log('üñ±Ô∏è Simulando clic en primera sugerencia');
                    
                    setTimeout(() => {
                        if (elements.doseForm && elements.doseForm.style.display !== 'none') {
                            console.log('‚úÖ Formulario de dosis mostrado correctamente');
                            
                            // Simular agregar dosis
                            if (elements.doseInput && elements.addBtn) {
                                elements.doseInput.value = '500mg cada 8 horas';
                                elements.addBtn.click();
                                console.log('üíä Simulando agregar medicamento con dosis');
                                
                                setTimeout(() => {
                                    const chips = elements.display ? elements.display.children.length : 0;
                                    console.log(`üè∑Ô∏è Chips de medicamentos: ${chips}`);
                                    
                                    if (chips > 0) {
                                        console.log('‚úÖ Medicamento agregado exitosamente');
                                    } else {
                                        console.log('‚ùå Medicamento no se agreg√≥');
                                    }
                                }, 500);
                            }
                        } else {
                            console.log('‚ùå Formulario de dosis no se mostr√≥');
                        }
                    }, 300);
                }
            } else {
                console.log('‚ùå No se mostraron sugerencias');
            }
        }, 500);
    } else {
        console.log('‚ùå Elementos b√°sicos no encontrados, no se puede probar funcionalidad');
    }
    
    // Verificar datos en el estado
    const currentBed = window.appState?.getBed(bedId);
    if (currentBed) {
        console.log(`\nüìä Medicamentos en estado: ${Array.isArray(currentBed.meds) ? currentBed.meds.length : 'No es array'}`);
        if (Array.isArray(currentBed.meds) && currentBed.meds.length > 0) {
            console.log('üíä Medicamentos actuales:', currentBed.meds);
        }
    }
}

// 9. Ejecutar todas las pruebas incluyendo medicamentos
async function runAllTests() {
    console.log('üöÄ EJECUTANDO TODAS LAS PRUEBAS DE IA...\n');
    
    checkAIModules();
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    await testMedicalTextAnalysis();
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    testNeurologicalClassifier();
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    triggerAutoAnalysis();
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    testAIDashboard();
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    testMedicationAnalysis();
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    testMedicationSection();
    
    console.log('\nüéâ PRUEBAS COMPLETADAS!');
}

// Funci√≥n de prueba r√°pida para medicamentos
function quickMedicationTest() {
    console.log('üöÄ PRUEBA R√ÅPIDA DE MEDICAMENTOS');
    console.log('================================');
    
    const bedId = window.appState?.getCurrentBedId();
    console.log(`üõèÔ∏è Cama actual: ${bedId || 'NO ENCONTRADA'}`);
    
    if (!bedId) {
        console.log('‚ùå ERROR: No hay cama seleccionada');
        return;
    }
    
    // Verificar elementos cr√≠ticos
    const elements = {
        section: document.getElementById(`section-medicacion-${bedId}`),
        input: document.getElementById(`med-input-${bedId}`),
        suggestions: document.getElementById(`med-suggestions-${bedId}`),
        display: document.getElementById(`med-display-${bedId}`)
    };
    
    console.log('\nüîç VERIFICACI√ìN DE ELEMENTOS:');
    let allElementsFound = true;
    Object.entries(elements).forEach(([name, element]) => {
        const found = !!element;
        console.log(`${found ? '‚úÖ' : '‚ùå'} ${name}: ${found ? 'OK' : 'FALTANTE'}`);
        if (!found) allElementsFound = false;
    });
    
    if (!allElementsFound) {
        console.log('\n‚ùå ELEMENTOS FALTANTES - La secci√≥n puede no estar renderizada');
        console.log('üí° Intenta abrir la secci√≥n de medicamentos manualmente');
        return;
    }
    
    // Verificar datos de medicamentos
    console.log('\nüíä VERIFICACI√ìN DE DATOS:');
    console.log(`üìã MEDICATIONS_DATA: ${window.MEDICATIONS_DATA ? window.MEDICATIONS_DATA.length + ' medicamentos' : 'NO CARGADO'}`);
    console.log(`üìã appState.medicationsList: ${window.appState?.medicationsList ? window.appState.medicationsList.length + ' medicamentos' : 'NO CARGADO'}`);
    
    // Verificar estado de la cama
    const currentBed = window.appState?.getBed(bedId);
    console.log(`üõèÔ∏è Datos de cama: ${currentBed ? 'OK' : 'NO ENCONTRADOS'}`);
    console.log(`üíä Medicamentos en cama: ${Array.isArray(currentBed?.meds) ? currentBed.meds.length : 'NO ES ARRAY'}`);
    
    if (Array.isArray(currentBed?.meds) && currentBed.meds.length > 0) {
        console.log('üìù Medicamentos actuales:', currentBed.meds);
    }
    
    console.log('\nüß™ PRUEBA FUNCIONAL:');
    console.log('Ejecuta: window.AITests.testMedicationSection() para prueba completa');
    console.log('O usa: quickMedicationAdd("Paracetamol") para agregar medicamento');
}

// Funci√≥n para agregar medicamento r√°pidamente
function quickMedicationAdd(medicationName) {
    const bedId = window.appState?.getCurrentBedId();
    if (!bedId) {
        console.log('‚ùå No hay cama seleccionada');
        return;
    }
    
    const input = document.getElementById(`med-input-${bedId}`);
    const addBtn = document.getElementById(`dose-add-${bedId}`);
    
    if (!input || !addBtn) {
        console.log('‚ùå Elementos de medicamentos no encontrados');
        return;
    }
    
    console.log(`üíä Agregando medicamento: ${medicationName}`);
    
    // Simular proceso completo
    input.value = medicationName;
    input.dispatchEvent(new Event('input', { bubbles: true }));
    
    setTimeout(() => {
        // Simular selecci√≥n y agregar
        const doseInput = document.getElementById(`dose-input-${bedId}`);
        if (doseInput) {
            doseInput.value = '500mg cada 8 horas';
            addBtn.click();
            console.log('‚úÖ Medicamento agregado');
        }
    }, 500);
}

// Exportar funciones para uso manual
window.AITests = {
    checkModules: checkAIModules,
    testTextAnalysis: testMedicalTextAnalysis,
    testClassifier: testNeurologicalClassifier,
    triggerAuto: triggerAutoAnalysis,
    testDashboard: testAIDashboard,
    testMedications: testMedicationAnalysis,
    testMedicationSection: testMedicationSection,
    quickMedicationTest: quickMedicationTest,
    quickMedicationAdd: quickMedicationAdd,
    runAll: runAllTests
};

console.log('‚úÖ Script de pruebas cargado.');
console.log('üß™ Funciones disponibles:');
console.log('  - window.AITests.runAll() - Ejecutar todas las pruebas');
console.log('  - quickMedicationTest() - Prueba r√°pida de medicamentos');
console.log('  - quickMedicationAdd("NombreMedicamento") - Agregar medicamento');
console.log('  - window.AITests.testMedicationSection() - Prueba completa de medicamentos'); 